package 多线程;

/**
 * 当两个并发线程(thread1和thread2)访问同一个对象(syncThread)中的synchronized代码块时，
 * 在同一时刻只能有一个线程得到执行，另一个线程受阻塞，必须等待当前线程执行完这个代码块以后才能执行该代码块。
 * Thread1和thread2是互斥的，因为在执行synchronized代码块时会锁定当前的对象，只有执行完该代码块才能释放该对象锁，
 * 下一个线程才能执行并锁定该对象。
 * 
 * @author hl
 *
 */
public class Synchronized代码块 implements Runnable {

	private static int count;

	public Synchronized代码块() {
		count = 0;
	}

	public void run() {
		// 同步代码块
		synchronized (this) {
			for (int i = 0; i < 5; i++) {
				try {
					System.out.println(Thread.currentThread().getName() + ":" + (count++));
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public int getCount() {
		return count;
	}

	/**
	 * 为什么thread1和thread2交替运行？ 因为锁的是代码块
	 * 
	 * @param args
	 */
	public static void main(String args[]) {
		Synchronized代码块 thread1 = new Synchronized代码块();
		Synchronized代码块 thread2 = new Synchronized代码块();
		Thread t1 = new Thread(thread1, "thread1");
		Thread t2 = new Thread(thread1, "thread2");
		t1.start();
		t2.start();
	}
}
